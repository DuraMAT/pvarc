import numpy as np
import pandas as pd
import os

dir_path = os.path.dirname(os.path.realpath(__file__))


def refractive_index_imaginary_silica(wavelength):
    dir_path = os.path.dirname(os.path.realpath(__file__))
    fname = os.path.join(dir_path, 'materials', 'refractive_index_k_silica_Kitamura2007.csv')
    df = pd.read_csv(fname)
    print(df.keys())
    k = np.interp(wavelength, df['wavelength'] * 1000., df['k'])

    return k

def reflectance_PTFE(wavelength):


    dir_path = os.path.dirname(os.path.realpath(__file__))
    fname = os.path.join(dir_path, 'materials', 'PMR10_PTFE_reflectance.xlsx')
    df = pd.read_excel(fname)
    reflectance =  np.interp(wavelength, df['Wavelength (nm)'], df['Reflectance (%)'])

    return reflectance


def refractive_index_fused_silica(wavelength):
    """
    Refractive index for Corning UV fused silica 7980

    https://www.corning.com/media/worldwide/csm/documents/5bf092438c5546dfa9b08e423348317b.pdf

    Parameters
    ----------
    wavelength
        wavelength in nm

    Returns
    -------

    """
    wavelength_um = wavelength / 1000

    A0 = 2.104025406E+00
    A1 = -1.456000330E-04
    A2 = -9.049135390E-03
    A3 = 8.801830992E-03
    A4 = 8.435237228E-05
    A5 = 1.681656789E-06
    A6 = -1.675425449E-08
    A7 = 8.326602461E-10

    n = np.sqrt( A0 + A1 * wavelength_um ** 4 + A2 * wavelength_um ** 2 + A3 * wavelength_um ** -2 + \
         A4 * wavelength_um ** -4 + A5 * wavelength_um ** -6 + A6 * wavelength_um ** -8 + A7 * wavelength_um ** -10 )

    return n


def refractive_index_glass(wavelength, type='soda-lime-low-iron'):
    """
    Return real part of refractive index for glass given an array of
    wavelengths.

    Data for Soda-lime glass from:
     https://refractiveindex.info/?shelf=glass&book=soda-lime&page=Rubin-lowiron

    Rubin 1985. Range of validity is 310-4600 nm.

    Data for BK7 glass from:
        https://refractiveindex.info/?shelf=glass&book=BK7&page=SCHOTT

    Parameters
    ----------
    wavelength : ndarray
        wavelength in nm

    type : str
        Type of glass. Options are:

        'soda-lime-low-iron'

    Returns
    -------
    index_of_refraction : ndarray
        Index of refraction at specified wavelength.

    """

    if type.lower() == 'soda-lime-low-iron':
        # wavelength = wavelength / 1000
        # n = 1.5130 - 0.003169 * wavelength ** 2 + 0.003962 * wavelength ** -2 + 0 * 1j

        wavelength_real_n = [[0.3100, 1.5539233467171], [0.3529, 1.5444188160462], [0.3958, 1.5377943708226], [0.4387, 1.53297644448],
         [0.4816, 1.5293470967242], [0.5245, 1.5265302298432], [0.5674, 1.5242862988783], [0.6103, 1.5224568649146],
         [0.6532, 1.5209337417404], [0.6961, 1.5196410153786], [0.7390, 1.5185241450581], [0.7819, 1.5175431287183],
         [0.8248, 1.5166680887001], [0.8677, 1.515876345512], [0.9106, 1.5151504328084], [0.9535, 1.5144767228468],
         [0.9964, 1.5138444569151], [1.039, 1.5132491442474], [1.082, 1.5126742062569], [1.125, 1.5121197035108],
         [1.168, 1.5115809892876], [1.211, 1.5110542269085], [1.254, 1.5105362260091], [1.297, 1.5100243161568],
         [1.340, 1.5095162483895], [1.383, 1.50901011784], [1.425, 1.5085160727976], [1.468, 1.5080092235501],
         [1.511, 1.5075001334071], [1.554, 1.5069877679718], [1.597, 1.5064712302038], [1.640, 1.5059497390991],
         [1.683, 1.5054226121336], [1.726, 1.5048892507288], [1.769, 1.5043491281606], [1.812, 1.5038017794514],
         [1.854, 1.503259789112], [1.897, 1.5026969890414], [1.940, 1.5021258670852], [1.983, 1.5015461318092],
         [2.026, 1.5009575223743], [2.069, 1.5003598047618], [2.112, 1.4997527685307], [2.155, 1.4991362240238],
         [2.198, 1.498509999952], [2.241, 1.4978739413002], [2.283, 1.4972430458197], [2.326, 1.4965871455006],
         [2.369, 1.4959210287082], [2.412, 1.4952445892608], [2.455, 1.4945577301934], [2.498, 1.4938603628144],
         [2.541, 1.4931524058725], [2.584, 1.49243378482], [2.627, 1.49170443116], [2.670, 1.4909642818667],
         [2.712, 1.4902308677348], [2.755, 1.4894692116907], [2.798, 1.4886965999799], [2.841, 1.4879129867424],
         [2.884, 1.4871183295115], [2.927, 1.4863125889166], [2.970, 1.4854957284165], [3.013, 1.4846677140586],
         [3.056, 1.4838285142623], [3.099, 1.4829780996223], [3.141, 1.4821366091427], [3.184, 1.4812639467524],
         [3.227, 1.4803799932016], [3.270, 1.479484726137], [3.313, 1.4785781246463], [3.356, 1.4776601691481],
         [3.399, 1.476730841292], [3.442, 1.4757901238665], [3.485, 1.4748380007153], [3.528, 1.4738744566608],
         [3.570, 1.4729222813458], [3.613, 1.471936119913], [3.656, 1.4709384975263], [3.699, 1.4699294022586],
         [3.742, 1.4689088228641], [3.785, 1.467876748732], [3.828, 1.4668331698444], [3.871, 1.4657780767365],
         [3.914, 1.4647114604605], [3.957, 1.4636333125522], [3.999, 1.4625690976899], [4.042, 1.4614681315292],
         [4.085, 1.4603556111086], [4.128, 1.4592315296015], [4.171, 1.4580958805312], [4.214, 1.4569486577497],
         [4.257, 1.4557898554182], [4.300, 1.4546194679881], [4.343, 1.4534374901842], [4.386, 1.4522439169887],
         [4.428, 1.4510669026967], [4.471, 1.449850394547], [4.514, 1.4486222774501], [4.557, 1.4473825472731],
         [4.600, 1.4461312000756]]

        wavelength_k = [[0.31, 1.191E-5], [0.32, 3.062E-6], [0.33, 1.399E-6], [0.34, 6.061E-7], [0.35, 2.458E-7], [0.36, 1.164E-7],
         [0.37, 9.300E-8], [0.38, 1.309E-7], [0.39, 6.261E-8], [0.40, 4.570E-8], [0.41, 5.013E-8], [0.42, 5.449E-8],
         [0.43, 5.878E-8], [0.44, 5.095E-8], [0.45, 4.252E-8], [0.46, 3.351E-8], [0.47, 3.675E-8], [0.48, 3.995E-8],
         [0.49, 2.972E-8], [0.50, 3.257E-8], [0.51, 3.538E-8], [0.52, 3.816E-8], [0.53, 4.091E-8], [0.54, 4.362E-8],
         [0.55, 4.632E-8], [0.56, 6.429E-8], [0.57, 6.721E-8], [0.58, 8.597E-8], [0.59, 8.913E-8], [0.60, 1.087E-7],
         [0.61, 1.121E-7], [0.62, 1.325E-7], [0.63, 1.534E-7], [0.64, 1.749E-7], [0.65, 1.790E-7], [0.66, 2.013E-7],
         [0.67, 2.242E-7], [0.68, 2.476E-7], [0.69, 2.526E-7], [0.70, 2.769E-7], [0.71, 3.017E-7], [0.72, 3.271E-7],
         [0.73, 3.531E-7], [0.74, 3.796E-7], [0.75, 4.067E-7], [0.76, 4.344E-7], [0.77, 4.627E-7], [0.78, 4.916E-7],
         [0.79, 5.210E-7], [0.80, 5.510E-7], [0.81, 5.816E-7], [0.82, 6.128E-7], [0.83, 6.446E-7], [0.84, 6.770E-7],
         [0.85, 7.099E-7], [0.86, 7.193E-7], [0.87, 7.513E-7], [0.88, 7.875E-7], [0.89, 7.975E-7], [0.90, 8.328E-7],
         [0.91, 8.430E-7], [0.92, 8.792E-7], [0.93, 8.897E-7], [0.94, 9.002E-7], [0.95, 9.376E-7], [0.96, 9.484E-7],
         [0.97, 9.592E-7], [0.98, 9.977E-7], [0.99, 1.009E-6], [1.00, 1.020E-6], [1.10, 1.132E-6], [1.20, 1.210E-6],
         [1.30, 1.211E-6], [1.40, 1.118E-6], [1.50, 9.585E-7], [1.60, 8.129E-7], [1.70, 8.301E-7], [1.80, 9.432E-7],
         [1.90, 1.117E-6], [2.00, 1.471E-6], [2.10, 1.739E-6], [2.20, 2.027E-6], [2.30, 2.401E-6], [2.40, 2.868E-6],
         [2.50, 3.441E-6], [2.60, 5.643E-6], [2.70, 9.156E-6], [2.80, 8.560E-5], [2.90, 9.745E-5], [3.00, 9.318E-5],
         [3.10, 9.489E-5], [3.20, 1.025E-4], [3.30, 1.128E-4], [3.40, 1.250E-4], [3.50, 1.299E-4], [3.60, 1.333E-4],
         [3.70, 1.319E-4], [3.80, 1.282E-4], [3.90, 1.242E-4], [4.00, 1.267E-4], [4.10, 1.460E-4], [4.20, 1.691E-4],
         [4.30, 2.124E-4], [4.40, 2.810E-4], [4.50, 3.657E-4], [4.60, 1.054E-3]]

        real_n = np.interp(wavelength, 1e3 * np.array(wavelength_real_n)[:, 0], np.array(wavelength_real_n)[:, 1],left=1.5539233467171,right=1.4473825472731)
        imag_n = np.interp(wavelength, 1e3 * np.array(wavelength_k)[:, 0], np.array(wavelength_k)[:, 1],left=1.191E-5,right=1.054E-3)

        n = real_n + 1j * imag_n

        # n[wavelength < 0.3] = n[wavelength < 0.3] + 1j*0
    elif type.upper() == 'BK7':
        wavelength = wavelength / 1000
        n = np.sqrt(1 + \
                    (1.03961212 * wavelength ** 2) / (
                            wavelength ** 2 - 0.00600069867) + \
                    (0.231792344 * wavelength ** 2) / (
                            wavelength ** 2 - 0.0200179144) + \
                    (1.01046945 * wavelength ** 2) / (
                            wavelength ** 2 - 103.560653)
                    )

    return n


def refractive_index_porous_silica(wavelength, porosity=0.5, model='lookup'):
    """
    Calculates index of refraction for porous silica using the effective
    medium approximation and volume averaging theory.

    https://refractiveindex.info/?shelf=main&book=SiO2&page=Malitson

    Parameters
    ----------
    wavelength : numeric

        Wavelength in nm.

    porosity : float

        Fractional porosity, a number from 0 to 1.0.


    Returns
    -------

    index : numeric

        Refractive index

    """
    if model == 'analytic':
        wavelength_um = wavelength / 1000
        n = np.sqrt(1 + \
                    (0.6961663 * wavelength_um ** 2) / (
                            wavelength_um ** 2 - 0.06840432 ** 2) + \
                    (0.4079426 * wavelength_um ** 2) / (
                            wavelength_um ** 2 - 0.11624142 ** 2) + \
                    (0.8974794 * wavelength_um ** 2) / (
                            wavelength_um ** 2 - 9.8961612 ** 2)
                    )


    elif model=='lookup':
        wavelength_real_n = [[0.2100, 1.5383576204905], [0.2174, 1.530846431063], [0.2251, 1.5240789072975], [0.2330, 1.5180417677275],
         [0.2412, 1.5125721155558], [0.2497, 1.5076095872199], [0.2585, 1.5031009629039], [0.2676, 1.498999218542],
         [0.2770, 1.495262719426], [0.2868, 1.4918215034661], [0.2969, 1.488683281387], [0.3074, 1.4857914366574],
         [0.3182, 1.4831504333467], [0.3294, 1.4807144415912], [0.3410, 1.4784676522483], [0.3530, 1.4763951298847],
         [0.3655, 1.4744682820342], [0.3783, 1.4727046797948], [0.3917, 1.4710525123802], [0.4055, 1.4695286500209],
         [0.4197, 1.4681218218832], [0.4345, 1.4668048202486], [0.4498, 1.465580829975], [0.4657, 1.4644360310913],
         [0.4821, 1.4633719346282], [0.4991, 1.4623764385944], [0.5167, 1.4614449911601], [0.5349, 1.4605730794883],
         [0.5537, 1.4597562854765], [0.5732, 1.4589865613939], [0.5934, 1.4582607881284], [0.6143, 1.4575758068817],
         [0.6360, 1.4569256013294], [0.6584, 1.4563104080175], [0.6816, 1.4557246986958], [0.7056, 1.4551660299221],
         [0.7305, 1.4546298754538], [0.7562, 1.4541161650842], [0.7829, 1.4536188536247], [0.8104, 1.4531396102638],
         [0.8390, 1.4526712743322], [0.8686, 1.4522138205731], [0.8992, 1.4517653834747], [0.9308, 1.4513240787777],
         [0.9636, 1.4508853971281], [0.9976, 1.450447735732], [1.033, 1.4500069615101], [1.069, 1.4495710901504],
         [1.107, 1.4491214616538], [1.146, 1.448668310738], [1.186, 1.4482096590065], [1.228, 1.4477322458328],
         [1.271, 1.4472455774929], [1.316, 1.4467363524093], [1.362, 1.4462138519129], [1.410, 1.445664578157],
         [1.460, 1.4450861470109], [1.512, 1.4444759883488], [1.565, 1.4438434020915], [1.620, 1.4431739285381],
         [1.677, 1.4424645759259], [1.736, 1.4417121733672], [1.797, 1.4409133669095], [1.861, 1.4400509385522],
         [1.926, 1.43914806608], [1.994, 1.4381729429417], [2.064, 1.4371349603433], [2.137, 1.4360139618555],
         [2.212, 1.4348196176837], [2.290, 1.433529881253], [2.371, 1.4321372109342], [2.454, 1.4306516985468],
         [2.541, 1.4290287283802], [2.630, 1.427296093753], [2.723, 1.4254044329951], [2.819, 1.4233613684394],
         [2.918, 1.4211544161909], [3.021, 1.4187459519934], [3.128, 1.416117293379], [3.238, 1.4132741569442],
         [3.352, 1.4101696832452], [3.470, 1.4067782146466], [3.592, 1.4030708962299], [3.719, 1.3989819997456],
         [3.850, 1.3945035722002], [3.986, 1.3895553417944], [4.126, 1.3841208059058], [4.271, 1.3780997735118],
         [4.422, 1.3713701305288], [4.578, 1.36388143366], [4.739, 1.3555262189157], [4.906, 1.3461171232165],
         [5.079, 1.3354823573874], [5.258, 1.3234105439689], [5.443, 1.3096384003386], [5.635, 1.2937460280032],
         [5.833, 1.2753723963511], [6.039, 1.2537289561387], [6.252, 1.2280888354422], [6.472, 1.1973256716307],
         [6.700, 1.1596494139777]]
        n = np.interp(wavelength, 1e3 * np.array(wavelength_real_n)[:, 0], np.array(wavelength_real_n)[:, 1],
                           left= 1.5383576204905, right=1.1596494139777)


    n_air = 1.00029

    n_total = np.sqrt(n ** 2 * (1 - porosity) + n_air ** 2 * (porosity)) + 0 * 1j

    # k0 = 5e-6
    # k1 = 5e-7
    # wavelength0 = 0.31
    # wavelength1 = 0.36

    # n_total = n_total + 1j*refractive_index_imaginary_silica(wavelength)*1e4
    # n_total = n_total + 1j*np.exp( np.log(k0) + np.log(k1) * (wavelength - wavelength0)/(wavelength1-wavelength0))

    return n_total


def refractive_index_silicon(wavelength):
    """
    Refractive index for silicon

    Data from Green 2008:
    https://refractiveindex.info/?shelf=main&book=Si&page=Green-2008

    :param wavelength:
    :return:
    """
    wavelength_real_n = [[2.5000e-01, 1.6650e+00], [2.6000e-01, 1.7570e+00], [2.7000e-01, 2.0680e+00],
                         [2.8000e-01, 2.9590e+00], [2.9000e-01, 4.3560e+00], [3.0000e-01, 4.9760e+00],
                         [3.1000e-01, 5.1210e+00], [3.2000e-01, 5.1120e+00], [3.3000e-01, 5.1950e+00],
                         [3.4000e-01, 5.3010e+00], [3.5000e-01, 5.4940e+00], [3.6000e-01, 6.0260e+00],
                         [3.7000e-01, 6.8910e+00], [3.8000e-01, 6.6160e+00], [3.9000e-01, 6.0390e+00],
                         [4.0000e-01, 5.6130e+00], [4.1000e-01, 5.3300e+00], [4.2000e-01, 5.1190e+00],
                         [4.3000e-01, 4.9490e+00], [4.4000e-01, 4.8120e+00], [4.5000e-01, 4.6910e+00],
                         [4.6000e-01, 4.5870e+00], [4.7000e-01, 4.4970e+00], [4.8000e-01, 4.4190e+00],
                         [4.9000e-01, 4.3500e+00], [5.0000e-01, 4.2940e+00], [5.1000e-01, 4.2410e+00],
                         [5.2000e-01, 4.1930e+00], [5.3000e-01, 4.1510e+00], [5.4000e-01, 4.1120e+00],
                         [5.5000e-01, 4.0770e+00], [5.6000e-01, 4.0450e+00], [5.7000e-01, 4.0150e+00],
                         [5.8000e-01, 3.9880e+00], [5.9000e-01, 3.9630e+00], [6.0000e-01, 3.9400e+00],
                         [6.1000e-01, 3.9180e+00], [6.2000e-01, 3.8980e+00], [6.3000e-01, 3.8790e+00],
                         [6.4000e-01, 3.8610e+00], [6.5000e-01, 3.8440e+00], [6.6000e-01, 3.8280e+00],
                         [6.7000e-01, 3.8130e+00], [6.8000e-01, 3.7980e+00], [6.9000e-01, 3.7840e+00],
                         [7.0000e-01, 3.7720e+00], [7.1000e-01, 3.7590e+00], [7.2000e-01, 3.7480e+00],
                         [7.3000e-01, 3.7370e+00], [7.4000e-01, 3.7270e+00], [7.5000e-01, 3.7170e+00],
                         [7.6000e-01, 3.7080e+00], [7.7000e-01, 3.6990e+00], [7.8000e-01, 3.6910e+00],
                         [7.9000e-01, 3.6830e+00], [8.0000e-01, 3.6750e+00], [8.1000e-01, 3.6680e+00],
                         [8.2000e-01, 3.6610e+00], [8.3000e-01, 3.6540e+00], [8.4000e-01, 3.6470e+00],
                         [8.5000e-01, 3.6410e+00], [8.6000e-01, 3.6350e+00], [8.7000e-01, 3.6300e+00],
                         [8.8000e-01, 3.6240e+00], [8.9000e-01, 3.6190e+00], [9.0000e-01, 3.6140e+00],
                         [9.1000e-01, 3.6090e+00], [9.2000e-01, 3.6040e+00], [9.3000e-01, 3.6000e+00],
                         [9.4000e-01, 3.5950e+00], [9.5000e-01, 3.5910e+00], [9.6000e-01, 3.5870e+00],
                         [9.7000e-01, 3.5830e+00], [9.8000e-01, 3.5790e+00], [9.9000e-01, 3.5750e+00],
                         [1.0000e+00, 3.5720e+00], [1.0100e+00, 3.5680e+00], [1.0200e+00, 3.5650e+00],
                         [1.0300e+00, 3.5620e+00], [1.0400e+00, 3.5590e+00], [1.0500e+00, 3.5560e+00],
                         [1.0600e+00, 3.5530e+00], [1.0700e+00, 3.5500e+00], [1.0800e+00, 3.5470e+00],
                         [1.0900e+00, 3.5450e+00], [1.1000e+00, 3.5420e+00], [1.1100e+00, 3.5400e+00],
                         [1.1200e+00, 3.5370e+00], [1.1300e+00, 3.5350e+00], [1.1400e+00, 3.5320e+00],
                         [1.1500e+00, 3.5300e+00], [1.1600e+00, 3.5280e+00], [1.1700e+00, 3.5260e+00],
                         [1.1800e+00, 3.5240e+00], [1.1900e+00, 3.5220e+00], [1.2000e+00, 3.5200e+00],
                         [1.2100e+00, 3.5180e+00], [1.2200e+00, 3.5170e+00], [1.2300e+00, 3.5150e+00],
                         [1.2400e+00, 3.5130e+00], [1.2500e+00, 3.5110e+00], [1.2600e+00, 3.5090e+00],
                         [1.2700e+00, 3.5080e+00], [1.2800e+00, 3.5060e+00], [1.2900e+00, 3.5050e+00],
                         [1.3000e+00, 3.5030e+00], [1.3100e+00, 3.5020e+00], [1.3200e+00, 3.5000e+00],
                         [1.3300e+00, 3.4990e+00], [1.3400e+00, 3.4970e+00], [1.3500e+00, 3.4960e+00],
                         [1.3600e+00, 3.4950e+00], [1.3700e+00, 3.4940e+00], [1.3800e+00, 3.4920e+00],
                         [1.3900e+00, 3.4910e+00], [1.4000e+00, 3.4900e+00], [1.4100e+00, 3.4890e+00],
                         [1.4200e+00, 3.4880e+00], [1.4300e+00, 3.4870e+00], [1.4400e+00, 3.4860e+00],
                         [1.4500e+00, 3.4850e+00]]

    wavelength_k = [[2.5000e-01, 3.6650e+00], [2.6000e-01, 4.0840e+00], [2.7000e-01, 4.6800e+00],
                    [2.8000e-01, 5.2870e+00], [2.9000e-01, 5.2860e+00], [3.0000e-01, 4.2340e+00],
                    [3.1000e-01, 3.5980e+00], [3.2000e-01, 3.3030e+00], [3.3000e-01, 3.1000e+00],
                    [3.4000e-01, 2.9770e+00], [3.5000e-01, 2.9380e+00], [3.6000e-01, 2.9660e+00],
                    [3.7000e-01, 2.1710e+00], [3.8000e-01, 9.4600e-01], [3.9000e-01, 4.4500e-01],
                    [4.0000e-01, 2.9600e-01], [4.1000e-01, 2.2700e-01], [4.2000e-01, 1.7600e-01],
                    [4.3000e-01, 1.3800e-01], [4.4000e-01, 1.0700e-01], [4.5000e-01, 8.6302e-02],
                    [4.6000e-01, 7.1381e-02], [4.7000e-01, 6.2086e-02], [4.8000e-01, 5.5004e-02],
                    [4.9000e-01, 4.9131e-02], [5.0000e-01, 4.4165e-02], [5.1000e-01, 3.9367e-02],
                    [5.2000e-01, 3.6415e-02], [5.3000e-01, 3.3108e-02], [5.4000e-01, 3.0295e-02],
                    [5.5000e-01, 2.7968e-02], [5.6000e-01, 2.5758e-02], [5.7000e-01, 2.4131e-02],
                    [5.8000e-01, 2.2524e-02], [5.9000e-01, 2.1081e-02], [6.0000e-01, 1.9934e-02],
                    [6.1000e-01, 1.8446e-02], [6.2000e-01, 1.7367e-02], [6.3000e-01, 1.6444e-02],
                    [6.4000e-01, 1.5432e-02], [6.5000e-01, 1.4431e-02], [6.6000e-01, 1.3498e-02],
                    [6.7000e-01, 1.2743e-02], [6.8000e-01, 1.1905e-02], [6.9000e-01, 1.1201e-02],
                    [7.0000e-01, 1.0528e-02], [7.1000e-01, 1.0057e-02], [7.2000e-01, 9.6257e-03],
                    [7.3000e-01, 8.9461e-03], [7.4000e-01, 8.3620e-03], [7.5000e-01, 7.8185e-03],
                    [7.6000e-01, 7.1970e-03], [7.7000e-01, 6.7402e-03], [7.8000e-01, 6.3933e-03],
                    [7.9000e-01, 5.8340e-03], [8.0000e-01, 5.4113e-03], [8.1000e-01, 4.9955e-03],
                    [8.2000e-01, 4.6134e-03], [8.3000e-01, 4.2734e-03], [8.4000e-01, 3.9439e-03],
                    [8.5000e-01, 3.6120e-03], [8.6000e-01, 3.2781e-03], [8.7000e-01, 2.9839e-03],
                    [8.8000e-01, 2.6821e-03], [8.9000e-01, 2.4293e-03], [9.0000e-01, 2.1701e-03],
                    [9.1000e-01, 1.9625e-03], [9.2000e-01, 1.7571e-03], [9.3000e-01, 1.5467e-03],
                    [9.4000e-01, 1.3689e-03], [9.5000e-01, 1.1793e-03], [9.6000e-01, 1.0237e-03],
                    [9.7000e-01, 8.7225e-04], [9.8000e-01, 7.4866e-04], [9.9000e-01, 6.2238e-04],
                    [1.0000e+00, 5.0930e-04], [1.0100e+00, 4.1071e-04], [1.0200e+00, 3.2386e-04],
                    [1.0300e+00, 2.4753e-04], [1.0400e+00, 1.8704e-04], [1.0500e+00, 1.3620e-04],
                    [1.0600e+00, 9.3631e-05], [1.0700e+00, 6.8118e-05], [1.0800e+00, 5.3285e-05],
                    [1.0900e+00, 4.0768e-05], [1.1000e+00, 3.0637e-05], [1.1100e+00, 2.3849e-05],
                    [1.1200e+00, 1.7825e-05], [1.1300e+00, 1.3488e-05], [1.1400e+00, 9.0718e-06],
                    [1.1500e+00, 6.2230e-06], [1.1600e+00, 3.8770e-06], [1.1700e+00, 2.0483e-06],
                    [1.1800e+00, 6.1036e-07], [1.1900e+00, 3.4091e-07], [1.2000e+00, 2.1008e-07],
                    [1.2100e+00, 1.2518e-07], [1.2200e+00, 7.9609e-08], [1.2300e+00, 4.6004e-08],
                    [1.2400e+00, 2.3682e-08], [1.2500e+00, 9.9472e-09], [1.2600e+00, 3.6096e-09],
                    [1.2700e+00, 2.0213e-09], [1.2800e+00, 1.2223e-09], [1.2900e+00, 7.2885e-10],
                    [1.3000e+00, 4.6553e-10], [1.3100e+00, 2.8147e-10], [1.3200e+00, 1.6807e-10],
                    [1.3300e+00, 8.4670e-11], [1.3400e+00, 3.7322e-11], [1.3500e+00, 1.8263e-11],
                    [1.3600e+00, 1.0281e-11], [1.3700e+00, 6.5413e-12], [1.3800e+00, 4.1730e-12],
                    [1.3900e+00, 2.5441e-12], [1.4000e+00, 1.5597e-12], [1.4100e+00, 9.5374e-13],
                    [1.4200e+00, 5.6500e-13], [1.4300e+00, 2.8449e-13], [1.4400e+00, 2.0626e-13],
                    [1.4500e+00, 1.3846e-13]]

    real_n = np.interp(wavelength, 1e3*np.array(wavelength_real_n)[:, 0], np.array(wavelength_real_n)[:, 1])
    imag_n = np.interp(wavelength, 1e3*np.array(wavelength_k)[:, 0], np.array(wavelength_k)[:, 1])

    n = real_n + 1j*imag_n

    return n

def refractive_index_eva(wavelength):
    """
    UV Transparent EVA

    https://refractiveindex.info/?shelf=other&book=EVASKY_S87&page=Vogt


    :param wavelength:
    :return:
    """

    wavelength_real_n = [[0.25, 1.557], [0.26, 1.551], [0.27, 1.545], [0.28, 1.54], [0.29, 1.536], [0.3, 1.532],
                         [0.31, 1.528], [0.32, 1.525], [0.33, 1.522], [0.34, 1.519], [0.35, 1.517], [0.36, 1.515],
                         [0.37, 1.513], [0.38, 1.511], [0.39, 1.51], [0.4, 1.508], [0.41, 1.507], [0.42, 1.506],
                         [0.43, 1.505], [0.44, 1.504], [0.45, 1.503], [0.46, 1.502], [0.47, 1.501], [0.48, 1.5],
                         [0.49, 1.499], [0.5, 1.499], [0.51, 1.498], [0.52, 1.497], [0.53, 1.497], [0.54, 1.496],
                         [0.55, 1.496], [0.56, 1.495], [0.57, 1.495], [0.58, 1.494], [0.59, 1.494], [0.6, 1.493],
                         [0.61, 1.493], [0.62, 1.493], [0.63, 1.492], [0.64, 1.492], [0.65, 1.492], [0.66, 1.491],
                         [0.67, 1.491], [0.68, 1.491], [0.69, 1.491], [0.7, 1.49], [0.71, 1.49], [0.72, 1.49],
                         [0.73, 1.49], [0.74, 1.49], [0.75, 1.489], [0.76, 1.489], [0.77, 1.489], [0.78, 1.489],
                         [0.79, 1.489], [0.8, 1.488], [0.81, 1.488], [0.82, 1.488], [0.83, 1.488], [0.84, 1.488],
                         [0.85, 1.488], [0.86, 1.488], [0.87, 1.487], [0.88, 1.487], [0.89, 1.487], [0.9, 1.487],
                         [0.91, 1.487], [0.92, 1.487], [0.93, 1.487], [0.94, 1.487], [0.95, 1.487], [0.96, 1.487],
                         [0.97, 1.486], [0.98, 1.486], [0.99, 1.486], [1, 1.486], [1.01, 1.486], [1.02, 1.486],
                         [1.03, 1.486], [1.04, 1.486], [1.05, 1.486], [1.06, 1.486], [1.07, 1.486], [1.08, 1.486],
                         [1.09, 1.486], [1.1, 1.486], [1.11, 1.485], [1.12, 1.485], [1.13, 1.485], [1.14, 1.485],
                         [1.15, 1.485], [1.16, 1.485], [1.17, 1.485], [1.18, 1.485], [1.19, 1.485], [1.2, 1.485],
                         [1.21, 1.485], [1.22, 1.485], [1.23, 1.485], [1.24, 1.485], [1.25, 1.485], [1.26, 1.485],
                         [1.27, 1.485], [1.28, 1.485], [1.29, 1.485], [1.3, 1.485], [1.31, 1.485], [1.32, 1.485],
                         [1.33, 1.484], [1.34, 1.484], [1.35, 1.484], [1.36, 1.484], [1.37, 1.484], [1.38, 1.484],
                         [1.39, 1.484], [1.4, 1.484], [1.41, 1.484], [1.42, 1.484], [1.43, 1.484], [1.44, 1.484],
                         [1.45, 1.484], [1.46, 1.484], [1.47, 1.484], [1.48, 1.484], [1.49, 1.484], [1.5, 1.484],
                         [1.51, 1.484], [1.52, 1.484], [1.53, 1.484], [1.54, 1.484], [1.55, 1.484], [1.56, 1.484],
                         [1.57, 1.484], [1.58, 1.484], [1.59, 1.484], [1.6, 1.484], [1.61, 1.484], [1.62, 1.484],
                         [1.63, 1.484], [1.64, 1.484], [1.65, 1.484], [1.66, 1.484], [1.67, 1.484], [1.68, 1.484],
                         [1.69, 1.484], [1.7, 1.484], [1.71, 1.484], [1.72, 1.484], [1.73, 1.484], [1.74, 1.484],
                         [1.75, 1.484], [1.76, 1.484], [1.77, 1.484], [1.78, 1.484], [1.79, 1.483], [1.8, 1.483],
                         [1.81, 1.483], [1.82, 1.483], [1.83, 1.483], [1.84, 1.483], [1.85, 1.483], [1.86, 1.483],
                         [1.87, 1.483], [1.88, 1.483], [1.89, 1.483], [1.9, 1.483], [1.91, 1.483], [1.92, 1.483],
                         [1.93, 1.483], [1.94, 1.483], [1.95, 1.483], [1.96, 1.483], [1.97, 1.483], [1.98, 1.483],
                         [1.99, 1.483], [2, 1.483], [2.01, 1.483], [2.02, 1.483], [2.03, 1.483], [2.04, 1.483],
                         [2.05, 1.483], [2.06, 1.483], [2.07, 1.483], [2.08, 1.483], [2.09, 1.483], [2.1, 1.483],
                         [2.11, 1.483], [2.12, 1.483], [2.13, 1.483], [2.14, 1.483], [2.15, 1.483], [2.16, 1.483],
                         [2.17, 1.483], [2.18, 1.483], [2.19, 1.483], [2.2, 1.483], [2.21, 1.483], [2.22, 1.483],
                         [2.23, 1.483], [2.24, 1.483], [2.25, 1.483], [2.26, 1.483], [2.27, 1.483], [2.28, 1.483],
                         [2.29, 1.483], [2.3, 1.483], [2.31, 1.483], [2.32, 1.483], [2.33, 1.483], [2.34, 1.483],
                         [2.35, 1.483], [2.36, 1.483], [2.37, 1.483], [2.38, 1.483], [2.39, 1.483], [2.4, 1.483],
                         [2.41, 1.483], [2.42, 1.483], [2.43, 1.483], [2.44, 1.483], [2.45, 1.483], [2.46, 1.483],
                         [2.47, 1.483], [2.48, 1.483], [2.49, 1.483], [2.5, 1.483]]

    wavelength_k = [[0.25, 9.86E-06], [0.26, 9.70E-06], [0.27, 8.20E-06], [0.28, 6.64E-06], [0.29, 5.31E-06],
                    [0.3, 3.89E-06], [0.31, 3.11E-06], [0.32, 2.64E-06], [0.33, 2.28E-06], [0.34, 1.95E-06],
                    [0.35, 1.56E-06], [0.36, 1.27E-06], [0.37, 1.07E-06], [0.38, 9.48E-07], [0.39, 8.57E-07],
                    [0.4, 7.84E-07], [0.41, 7.37E-07], [0.42, 6.96E-07], [0.43, 6.62E-07], [0.44, 6.33E-07],
                    [0.45, 6.04E-07], [0.46, 5.78E-07], [0.47, 5.55E-07], [0.48, 5.32E-07], [0.49, 5.10E-07],
                    [0.5, 4.90E-07], [0.51, 4.70E-07], [0.52, 4.52E-07], [0.53, 4.33E-07], [0.54, 4.17E-07],
                    [0.55, 4.02E-07], [0.56, 3.87E-07], [0.57, 3.74E-07], [0.58, 3.58E-07], [0.59, 3.47E-07],
                    [0.6, 3.34E-07], [0.61, 3.23E-07], [0.62, 3.12E-07], [0.63, 3.03E-07], [0.64, 2.96E-07],
                    [0.65, 2.88E-07], [0.66, 2.74E-07], [0.67, 2.64E-07], [0.68, 2.56E-07], [0.69, 2.49E-07],
                    [0.7, 2.43E-07], [0.71, 2.36E-07], [0.72, 2.32E-07], [0.73, 2.32E-07], [0.74, 2.38E-07],
                    [0.75, 2.53E-07], [0.76, 2.59E-07], [0.77, 2.40E-07], [0.78, 2.10E-07], [0.79, 1.94E-07],
                    [0.8, 1.89E-07], [0.81, 1.91E-07], [0.82, 1.97E-07], [0.83, 2.01E-07], [0.84, 1.98E-07],
                    [0.85, 1.91E-07], [0.86, 1.88E-07], [0.87, 1.91E-07], [0.88, 2.19E-07], [0.89, 2.89E-07],
                    [0.9, 3.86E-07], [0.91, 5.64E-07], [0.92, 8.43E-07], [0.93, 1.05E-06], [0.94, 9.30E-07],
                    [0.95, 5.35E-07], [0.96, 2.72E-07], [0.97, 2.16E-07], [0.98, 2.05E-07], [0.99, 2.35E-07],
                    [1, 3.00E-07], [1.01, 3.98E-07], [1.02, 4.99E-07], [1.03, 6.01E-07], [1.04, 6.68E-07],
                    [1.05, 6.33E-07], [1.06, 5.33E-07], [1.07, 4.40E-07], [1.08, 3.69E-07], [1.09, 3.26E-07],
                    [1.1, 3.11E-07], [1.11, 3.41E-07], [1.12, 4.28E-07], [1.13, 6.35E-07], [1.14, 1.08E-06],
                    [1.15, 1.99E-06], [1.16, 3.31E-06], [1.17, 4.83E-06], [1.18, 6.59E-06], [1.19, 9.23E-06],
                    [1.2, 1.30E-05], [1.21, 1.59E-05], [1.22, 1.34E-05], [1.23, 8.47E-06], [1.24, 5.03E-06],
                    [1.25, 3.26E-06], [1.26, 2.32E-06], [1.27, 1.82E-06], [1.28, 1.53E-06], [1.29, 1.35E-06],
                    [1.3, 1.21E-06], [1.31, 1.08E-06], [1.32, 1.00E-06], [1.33, 1.04E-06], [1.34, 1.26E-06],
                    [1.35, 1.79E-06], [1.36, 2.66E-06], [1.37, 4.44E-06], [1.38, 7.21E-06], [1.39, 1.04E-05],
                    [1.4, 1.16E-05], [1.41, 1.20E-05], [1.42, 1.23E-05], [1.43, 1.15E-05], [1.44, 1.02E-05],
                    [1.45, 8.63E-06], [1.46, 7.16E-06], [1.47, 5.80E-06], [1.48, 4.66E-06], [1.49, 3.89E-06],
                    [1.5, 3.40E-06], [1.51, 3.19E-06], [1.52, 3.18E-06], [1.53, 3.29E-06], [1.54, 3.24E-06],
                    [1.55, 2.86E-06], [1.56, 2.47E-06], [1.57, 2.25E-06], [1.58, 2.15E-06], [1.59, 2.18E-06],
                    [1.6, 2.30E-06], [1.61, 2.56E-06], [1.62, 3.01E-06], [1.63, 3.78E-06], [1.64, 4.94E-06],
                    [1.65, 6.79E-06], [1.66, 9.65E-06], [1.67, 1.39E-05], [1.68, 1.89E-05], [1.69, 2.50E-05],
                    [1.7, 3.46E-05], [1.71, 5.29E-05], [1.72, 8.61E-05], [1.73, 9.80E-05], [1.74, 8.69E-05],
                    [1.75, 8.12E-05], [1.76, 8.20E-05], [1.77, 7.23E-05], [1.78, 6.15E-05], [1.79, 5.72E-05],
                    [1.8, 5.64E-05], [1.81, 5.58E-05], [1.82, 5.32E-05], [1.83, 5.00E-05], [1.84, 4.56E-05],
                    [1.85, 4.13E-05], [1.86, 3.78E-05], [1.87, 3.50E-05], [1.88, 3.37E-05], [1.89, 3.41E-05],
                    [1.9, 3.46E-05], [1.91, 3.46E-05], [1.92, 3.47E-05], [1.93, 3.55E-05], [1.94, 3.62E-05],
                    [1.95, 3.55E-05], [1.96, 3.45E-05], [1.97, 3.39E-05], [1.98, 3.39E-05], [1.99, 3.47E-05],
                    [2, 3.61E-05], [2.01, 3.66E-05], [2.02, 3.57E-05], [2.03, 3.46E-05], [2.04, 3.45E-05],
                    [2.05, 3.46E-05], [2.06, 3.43E-05], [2.07, 3.38E-05], [2.08, 3.38E-05], [2.09, 3.53E-05],
                    [2.1, 3.74E-05], [2.11, 3.90E-05], [2.12, 4.15E-05], [2.13, 4.72E-05], [2.14, 5.10E-05],
                    [2.15, 4.54E-05], [2.16, 4.10E-05], [2.17, 4.01E-05], [2.18, 4.02E-05], [2.19, 4.13E-05],
                    [2.2, 4.40E-05], [2.21, 4.99E-05], [2.22, 5.81E-05], [2.23, 7.19E-05], [2.24, 9.01E-05],
                    [2.25, 1.57E-04], [2.26, 2.11E-04], [2.27, 2.70E-04], [2.28, 3.59E-04], [2.29, 5.18E-04],
                    [2.3, 7.34E-04], [2.31, 8.12E-04], [2.32, 6.54E-04], [2.33, 5.95E-04], [2.34, 6.69E-04],
                    [2.35, 7.58E-04], [2.36, 7.35E-04], [2.37, 7.06E-04], [2.38, 7.47E-04], [2.39, 7.56E-04],
                    [2.4, 7.50E-04], [2.41, 7.14E-04], [2.42, 6.84E-04], [2.43, 6.63E-04], [2.44, 6.21E-04],
                    [2.45, 5.78E-04], [2.46, 5.33E-04], [2.47, 5.03E-04], [2.48, 4.65E-04], [2.49, 4.45E-04],
                    [2.5, 4.19E-04]]

    wavelength_real_n = np.array(wavelength_real_n)
    wavelength_k = np.array(wavelength_k)
    real_n = np.interp(wavelength, 1e3*wavelength_real_n[:, 0], wavelength_real_n[:, 1], left=1.557,right=1.483)
    imag_n = np.interp(wavelength, 1e3*wavelength_k[:, 0], wavelength_k[:, 1],left=9.86E-06,right=4.19E-04)

    n = real_n + 1j*imag_n

    return n

def refractive_index_SiN(wavelength):
    """
    https://refractiveindex.info/?shelf=main&book=Si3N4&page=Luke

    :param wavelength:
    :return:
    """
    wavelength_real_n = np.array([[0.3100, 2.1759394676161], [0.3619, 2.1244526847835], [0.4139, 2.0934554672447],
                      [0.4658, 2.0731921339333], [0.5178, 2.0590472271639], [0.5697, 2.0487351006665],
                      [0.6216, 2.0409071028311], [0.6736, 2.0347606435188], [0.7255, 2.0298173905897],
                      [0.7775, 2.0257264818369], [0.8294, 2.0222778887066], [0.8813, 2.0193047731615],
                      [0.9333, 2.0166885210243], [0.9852, 2.0143553731414], [1.037, 2.0122412318597],
                      [1.089, 2.0102866760229], [1.141, 2.0084631742011], [1.193, 2.0067417199434],
                      [1.245, 2.0050993473208], [1.297, 2.0035176751298], [1.349, 2.0019818454037],
                      [1.401, 2.0004797384719], [1.453, 1.9990013850227], [1.505, 1.9975385205152],
                      [1.557, 1.9960842438007], [1.609, 1.9946327529558], [1.660, 1.9932071401451],
                      [1.712, 1.9917473810267], [1.764, 1.9902778065688], [1.816, 1.9887953287262],
                      [1.868, 1.9872972757271], [1.920, 1.9857813243255], [1.972, 1.9842454445198],
                      [2.024, 1.9826878541809], [2.076, 1.9811069816063], [2.128, 1.9795014344546],
                      [2.180, 1.9778699738446], [2.232, 1.9762114926598], [2.284, 1.974524997292],
                      [2.336, 1.9728095922163], [2.388, 1.9710644669019], [2.440, 1.9692888846646],
                      [2.491, 1.9675172150711], [2.543, 1.9656793740058], [2.595, 1.9638092307671],
                      [2.647, 1.9619062604624], [2.699, 1.9599699760392], [2.751, 1.9579999236918],
                      [2.803, 1.9559956788569], [2.855, 1.9539568427124], [2.907, 1.9518830391067],
                      [2.959, 1.9497739118599], [3.011, 1.9476291223833], [3.063, 1.9454483475756],
                      [3.115, 1.943231277958], [3.167, 1.940977616017], [3.219, 1.9386870747281],
                      [3.271, 1.9363593762366], [3.323, 1.933994250677], [3.374, 1.9316380001471],
                      [3.426, 1.929197969754], [3.478, 1.9267197453428], [3.530, 1.9242030793202],
                      [3.582, 1.9216477277316], [3.634, 1.9190534496169], [3.686, 1.9164200064219],
                      [3.738, 1.9137471614607], [3.790, 1.9110346794217], [3.842, 1.9082823259132],
                      [3.894, 1.9054898670439], [3.946, 1.9026570690344], [3.998, 1.8997836978561],
                      [4.050, 1.8968695188946], [4.102, 1.8939142966348], [4.154, 1.8909177943655],
                      [4.206, 1.8878797739003], [4.257, 1.8848596171279], [4.309, 1.8817386484976],
                      [4.361, 1.8785754404128], [4.413, 1.8753697463298], [4.465, 1.8721213170359],
                      [4.517, 1.8688299004391], [4.569, 1.8654952413638], [4.621, 1.862117081353],
                      [4.673, 1.8586951584753], [4.725, 1.8552292071362], [4.777, 1.8517189578932],
                      [4.829, 1.8481641372731], [4.881, 1.8445644675922], [4.933, 1.8409196667773],
                      [4.985, 1.8372294481887], [5.037, 1.8334935204425], [5.088, 1.8297847524406],
                      [5.140, 1.8259574057584], [5.192, 1.8220834514792], [5.244, 1.8181625775726],
                      [5.296, 1.8141944663737], [5.348, 1.8101787943986], [5.400, 1.8061152321586],
                      [5.452, 1.8020034439713], [5.504, 1.797843087767]])
    real_n = np.interp(wavelength, 1e3 * wavelength_real_n[:, 0], wavelength_real_n[:, 1],
                       left=2.1759394676161, right=1.797843087767)
    n = real_n

    return n


if __name__ == '__main__':
    wavelength = np.linspace(300, 1000, 100)
    n = refractive_index_silicon(wavelength)
    print(n)